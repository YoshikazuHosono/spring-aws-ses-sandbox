"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mailparser_1 = require("mailparser");
const ajv_1 = __importDefault(require("../ajv"));
const store_1 = __importDefault(require("../store"));
const handler = (req, res, next) => {
    var _a, _b;
    const valid = validate(req.body);
    if (!valid) {
        res.status(404).send({ message: 'Bad Request Exception', detail: 'aws-ses-v2-local: Schema validation failed' });
        return;
    }
    if ((_a = req.body.Content) === null || _a === void 0 ? void 0 : _a.Simple) {
        handleSimple(req, res, next);
    }
    else if ((_b = req.body.Content) === null || _b === void 0 ? void 0 : _b.Raw) {
        handleRaw(req, res, next);
    }
    else {
        res.status(400).send({ message: 'Bad Request Exception', detail: 'aws-ses-v2-local: Must have either Simple or Raw content. Want to add support for other types of emails? Open a PR!' });
    }
};
const handleSimple = async (req, res) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
    if (!((_d = (_c = (_b = (_a = req.body.Content) === null || _a === void 0 ? void 0 : _a.Simple) === null || _b === void 0 ? void 0 : _b.Body) === null || _c === void 0 ? void 0 : _c.Html) === null || _d === void 0 ? void 0 : _d.Data) && !((_h = (_g = (_f = (_e = req.body.Content) === null || _e === void 0 ? void 0 : _e.Simple) === null || _f === void 0 ? void 0 : _f.Body) === null || _g === void 0 ? void 0 : _g.Text) === null || _h === void 0 ? void 0 : _h.Data)) {
        res.status(400).send({ message: 'Bad Request Exception', detail: 'aws-ses-v2-local: Simple content must have either a HTML or Text body.' });
        return;
    }
    if (!((_l = (_k = (_j = req.body.Content) === null || _j === void 0 ? void 0 : _j.Simple) === null || _k === void 0 ? void 0 : _k.Subject) === null || _l === void 0 ? void 0 : _l.Data)) {
        res.status(400).send({ message: 'Bad Request Exception', detail: 'aws-ses-v2-local: Simple content must have a subject.' });
        return;
    }
    if (!req.body.FromEmailAddress) {
        res.status(400).send({ message: 'Bad Request Exception', detail: 'aws-ses-v2-local: Must have a from email address. Want to add support for other types of emails? Open a PR!' });
        return;
    }
    const messageId = `ses-${Math.floor(Math.random() * 900000000 + 100000000)}`;
    store_1.default.emails.push({
        messageId,
        from: req.body.FromEmailAddress,
        replyTo: (_m = req.body.ReplyToAddresses) !== null && _m !== void 0 ? _m : [],
        destination: {
            to: (_p = (_o = req.body.Destination) === null || _o === void 0 ? void 0 : _o.ToAddresses) !== null && _p !== void 0 ? _p : [],
            cc: (_r = (_q = req.body.Destination) === null || _q === void 0 ? void 0 : _q.CcAddresses) !== null && _r !== void 0 ? _r : [],
            bcc: (_t = (_s = req.body.Destination) === null || _s === void 0 ? void 0 : _s.BccAddresses) !== null && _t !== void 0 ? _t : [],
        },
        subject: req.body.Content.Simple.Subject.Data,
        body: {
            html: (_u = req.body.Content.Simple.Body.Html) === null || _u === void 0 ? void 0 : _u.Data,
            text: (_v = req.body.Content.Simple.Body.Text) === null || _v === void 0 ? void 0 : _v.Data,
        },
        attachments: [],
        at: Math.floor(new Date().getTime() / 1000),
    });
    res.status(200).send({ MessageId: messageId });
};
const handleRaw = async (req, res) => {
    var _a, _b, _c, _d, _e;
    const messageId = `ses-${Math.floor(Math.random() * 900000000 + 100000000)}`;
    const message = await (0, mailparser_1.simpleParser)(Buffer.from((_b = (_a = req.body.Content) === null || _a === void 0 ? void 0 : _a.Raw) === null || _b === void 0 ? void 0 : _b.Data, 'base64'));
    store_1.default.emails.push({
        messageId,
        from: (_d = (_c = message.from) === null || _c === void 0 ? void 0 : _c.text) !== null && _d !== void 0 ? _d : req.body.Source,
        replyTo: message.replyTo ? [message.replyTo.text] : [],
        destination: {
            to: (Array.isArray(message.to) ? message.to : [message.to || null]).filter((m) => !!m).map((a) => a.text),
            cc: (Array.isArray(message.cc) ? message.cc : [message.cc || null]).filter((m) => !!m).map((a) => a.text),
            bcc: (Array.isArray(message.bcc) ? message.bcc : [message.bcc || null]).filter((m) => !!m).map((a) => a.text),
        },
        subject: (_e = message.subject) !== null && _e !== void 0 ? _e : '(no subject)',
        body: {
            text: message.text,
            html: message.html || undefined,
        },
        attachments: message.attachments.map((a) => ({ ...a, content: a.content.toString('base64') })),
        at: Math.floor(new Date().getTime() / 1000),
    });
    res.status(200).send({ MessageId: messageId });
};
exports.default = handler;
const sendEmailRequestSchema = {
    type: 'object',
    properties: {
        ConfigurationSetName: { type: 'string' },
        Content: {
            type: 'object',
            properties: {
                Raw: {
                    type: 'object',
                    properties: {
                        Data: { type: 'string' }, // base-64 encoded blob
                    },
                },
                Simple: {
                    type: 'object',
                    properties: {
                        Body: {
                            type: 'object',
                            properties: {
                                Html: {
                                    type: 'object',
                                    properties: {
                                        Charset: { type: 'string' },
                                        Data: { type: 'string' },
                                    },
                                    required: ['Data'],
                                },
                                Text: {
                                    type: 'object',
                                    properties: {
                                        Charset: { type: 'string' },
                                        Data: { type: 'string' },
                                    },
                                    required: ['Data'],
                                },
                            },
                        },
                        Subject: {
                            type: 'object',
                            properties: {
                                Charset: { type: 'string' },
                                Data: { type: 'string' },
                            },
                            required: ['Data'],
                        },
                    },
                    required: ['Body', 'Subject'],
                },
                Template: {
                    type: 'object',
                    properties: {
                        TemplateArn: { type: 'string' },
                        TemplateData: { type: 'string' },
                        TemplateName: { type: 'string' },
                    },
                },
            },
        },
        Destination: {
            type: 'object',
            properties: {
                BccAddresses: { type: 'array', items: { type: 'string' } },
                CcAddresses: { type: 'array', items: { type: 'string' } },
                ToAddresses: { type: 'array', items: { type: 'string' } },
            },
        },
        EmailTags: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    Name: { type: 'string' },
                    Value: { type: 'string' },
                },
            },
        },
        FeedbackForwardingEmailAddress: { type: 'string' },
        FeedbackForwardingEmailAddressIdentityArn: { type: 'string' },
        FromEmailAddress: { type: 'string' },
        FromEmailAddressIdentityArn: { type: 'string' },
        ListManagementOptions: {
            type: 'object',
            properties: {
                ContactListName: { type: 'string' },
                TopicName: { type: 'string' },
            },
        },
        ReplyToAddresses: { type: 'array', items: { type: 'string' } },
    },
    required: ['Content'],
};
const validate = ajv_1.default.compile(sendEmailRequestSchema);
